package info.nukoneko.android.ho_n.controller.main.twitter.tab;import android.content.Context;import android.content.Intent;import android.databinding.DataBindingUtil;import android.net.Uri;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.v7.widget.RecyclerView;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.TextView;import java.util.ArrayList;import java.util.Collection;import java.util.List;import butterknife.ButterKnife;import butterknife.OnClick;import info.nukoneko.android.ho_n.R;import info.nukoneko.android.ho_n.databinding.ItemListTweetBinding;import info.nukoneko.android.ho_n.sys.util.rx.Optional;import info.nukoneko.android.ho_n.sys.util.text.NKTextLinkCallback;import rx.Observable;import rx.functions.Action1;import rx.functions.Func1;import twitter4j.Status;/** * Created by atsumi on 2016/10/21. */public final class NKTweetAdapter extends RecyclerView.Adapter<NKTweetAdapter.TweetViewHolder> {    @NonNull    private final ArrayList<Status> data = new ArrayList<>();    private final Object lock = new Object();    @Nullable    private NKTweetAdapterListener listener;    private final Context context;    public NKTweetAdapter(Context context, @Nullable NKTweetAdapterListener listener) {        this.context = context;        this.listener = listener;    }    @Override    public NKTweetAdapter.TweetViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        final View view = LayoutInflater.from(parent.getContext())                .inflate(R.layout.item_list_tweet, parent, false);        return new NKTweetAdapter.TweetViewHolder(view);    }    @Override    public void onBindViewHolder(NKTweetAdapter.TweetViewHolder holder, int position) {        Optional.ofNullable(data.get(position)).subscribe(status -> {            holder.initReTweetView();            holder.getBinding().setTweet(status);            if (getContext() instanceof OnClickTweetListener) {                OnClickTweetListener tweetListener = (OnClickTweetListener) getContext();                holder.getBinding().tweetView.setOnClickListener(view -> tweetListener.onClickTweet(status));                holder.getBinding().tweetUserIcon.setOnClickListener(view -> tweetListener.onClickUserIcon(status));                holder.getBinding().tweetStatusFavorite.setOnClickListener(view -> tweetListener.onClickTweetFavorite(status));                holder.getBinding().tweetStatusReTweet.setOnClickListener(view -> tweetListener.onClickTweetReTweet(status));            }        });    }    @Override    public int getItemCount() {        return data.size();    }    public Context getContext() {        return context;    }    public void clear() {        synchronized (lock) {            int itemCount = data.size();            data.clear();            notifyItemRangeRemoved(0, itemCount);        }    }    void add(Status status) {        synchronized (lock) {            if(Observable.from(data)                    .filter(_status -> status.getId() == _status.getId())                    .toList().toBlocking().single().size() > 0) return;            data.add(0, status);            notifyItemInserted(0);            Optional.ofNullable(listener).subscribe(nkTweetAdapterListener -> {                nkTweetAdapterListener.onInserted(0, status);            });        }    }    public int indexOf(Status status) {        return indexOf(status.getId());    }    public int indexOf(long statusId) {        synchronized (lock) {            int index = -1;            for (int i = 0; i < data.size(); i++) {                if (data.get(i).getId() == statusId) {                    index = i;                    break;                }            }            return index;        }    }    public void update(Status status) {        synchronized (lock) {            final int index = indexOf(status);            if (index == -1) {                return;            }            data.set(index, status);            notifyItemChanged(index);            Optional.ofNullable(listener).subscribe(nkTweetAdapterListener -> {                nkTweetAdapterListener.onUpdated(index, status);            });        }    }    public void delete(long statusId) {        synchronized (lock) {            final int index = indexOf(statusId);            if (index == -1) return;            // remove from list            Optional.ofNullable(data.get(index)).subscribe(status -> {                if (status.getId() != statusId) return;                Optional.ofNullable(listener).subscribe(listener1 -> {                    listener1.onDeleted(index, status);                });                data.remove(index);                notifyItemRemoved(index);            });        }    }    void putAll(@NonNull List<? extends Status> collection) {        synchronized (lock) {            List<? extends Status> filteredList =                    Observable.from(collection)                            .filter(new Func1<Status, Boolean>() {                                @Override                                public Boolean call(Status status) {                                    return indexOf(status) == -1;                                }                            }).toList().toBlocking().single();            if (filteredList.size() == 0) {                return;            }            ArrayList<Long> insertPositions = new ArrayList<>();            Observable.from(filteredList).forEach((Action1<Status>) status -> {                for (int i = 0; i < data.size(); i++) {                    if (i == 0 && (status.getId() > data.get(0).getId())) {                        insertPositions.add(0L);                        return;                    }                    if (i > 0 && (data.get(i - 1).getId() > status.getId() && status.getId() > data.get(0).getId())) {                        Optional.ofParsable(i, Long.class).subscribe(aLong -> {                            if (insertPositions.indexOf(aLong) > -1) {                                Optional.ofParsable(insertPositions.get(insertPositions.size() - 1), Long.class)                                        .subscribe(aLong1 -> {                                            insertPositions.add(aLong1 + 1L);                                        });                            } else {                                insertPositions.add(aLong);                            }                        });                        return;                    }                }                Optional.ofParsable(data.size(), Long.class).subscribe(aLong -> {                    if (insertPositions.indexOf(aLong) > -1) {                        Optional.ofParsable(insertPositions.get(insertPositions.size() - 1), Long.class)                                .subscribe(aLong1 -> {                                    insertPositions.add(aLong1 + 1L);                                });                    } else {                        insertPositions.add(aLong);                    }                });            });            if (filteredList.size() == insertPositions.size()) {                for (int i = 0; i < filteredList.size(); i++) {                    final int insertPosition = (int) (insertPositions.get(i) + i);                    data.add(insertPosition, filteredList.get(i));                    notifyItemInserted(insertPosition);                }            } else {                Log.d("Tweet Insert Error", "insert Error");            }        }    }    void addAll(@NonNull List<? extends Status> collection) {        synchronized (lock) {            long minStatusId = Long.MAX_VALUE;            long maxStatusId = Long.MIN_VALUE;            if (data.size() > 0) {                minStatusId = data.get(data.size() - 1).getId();                maxStatusId = data.get(0).getId();            }            long finalMaxStatusId = maxStatusId;            long finalMinStatusId = minStatusId;            Collection<? extends Status> filteredList =                    Observable.from(collection)                            .filter(s -> s.getId() > finalMaxStatusId || finalMinStatusId > s.getId()).toList()                            .toBlocking().single();            int itemCount = filteredList.size();            int startPosition = data.size();            data.addAll(filteredList);            notifyItemRangeInserted(startPosition, itemCount);        }    }    @Nullable    public Status getLastItem() {        if (getItemCount() == 0) {            return null;        }        return data.get(getItemCount() - 1);    }    //*** TextLinkCallback    public static class TweetLinkCallback extends NKTextLinkCallback {        public TweetLinkCallback(Context context) {            super(context);        }        @Override        public void onClickUri(@NonNull String uri) {            getContext().startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(uri)));        }        @Override        public void onClickTag(@NonNull String tag) {        }    }    //*** TweetViewHolder    static class TweetViewHolder extends RecyclerView.ViewHolder {        private ItemListTweetBinding binding;        TweetViewHolder(View itemView) {            super(itemView);            binding = DataBindingUtil.bind(itemView);        }        void initReTweetView(){            binding.tweetReTweetUserIcon.setImageDrawable(null);            binding.tweetReTweetUserName.setText("");            binding.tweetReTweetUserScreen.setText("");        }        ItemListTweetBinding getBinding() {            return binding;        }    }    interface NKTweetAdapterListener {        void onInserted(int position, Status status);        void onUpdated(int position, Status status);        void onDeleted(int position, Status status);    }}
package info.nukoneko.android.ho_n.controller.main.twitter.tab;import android.support.annotation.NonNull;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.TextView;import java.util.ArrayList;import java.util.Collection;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;import info.nukoneko.android.ho_n.R;import info.nukoneko.android.ho_n.sys.util.rx.Optional;import rx.Observable;import twitter4j.Status;/** * Created by TEJNEK on 2016/10/21. */public final class NKTweetAdapter extends RecyclerView.Adapter<NKTweetAdapter.TweetViewHolder> {    @NonNull    private final List<Status> data = new ArrayList<>();    private final Object lock = new Object();    @Override    public NKTweetAdapter.TweetViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        final LayoutInflater inflater = LayoutInflater.from(parent.getContext());        final View view = inflater.inflate(R.layout.item_list_tweet, parent, false);        return new NKTweetAdapter.TweetViewHolder(view);    }    @Override    public void onBindViewHolder(NKTweetAdapter.TweetViewHolder holder, int position) {        Optional.ofNullable(data.get(position)).subscribe(status -> {            holder.tweetText.setText(status.getText());        });    }    @Override    public int getItemCount() {        return data.size();    }    public void clear() {        synchronized (lock) {            int itemCount = data.size();            data.clear();            notifyItemRangeRemoved(0, itemCount);        }    }    public void addAll(@NonNull List<? extends Status> collection) {        synchronized (lock) {            long minStatusId = Long.MAX_VALUE;            long maxStatusId = Long.MIN_VALUE;            if (data.size() > 0) {                minStatusId = data.get(data.size() - 1).getId();                maxStatusId = data.get(0).getId();            }            long finalMaxStatusId = maxStatusId;            long finalMinStatusId = minStatusId;            Collection<? extends Status> filteredList =                    Observable.from(collection)                            .filter(s -> s.getId() > finalMaxStatusId || finalMinStatusId > s.getId()).toList()                            .toBlocking().single();            int itemCount = filteredList.size();            int startPosition = data.size();            data.addAll(filteredList);            notifyItemRangeInserted(startPosition, itemCount);        }    }    static class TweetViewHolder extends RecyclerView.ViewHolder {        final View view;        @BindView(R.id.text)        TextView tweetText;        public TweetViewHolder(View itemView) {            super(itemView);            this.view = itemView;            ButterKnife.bind(this, itemView);        }    }}
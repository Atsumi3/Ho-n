package info.nukoneko.android.ho_n.controller.main.twitter.tab;import android.content.Context;import android.content.Intent;import android.graphics.Typeface;import android.graphics.drawable.Drawable;import android.net.Uri;import android.os.Build;import android.support.annotation.ColorInt;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.v7.widget.CardView;import android.support.v7.widget.RecyclerView;import android.text.method.LinkMovementMethod;import android.view.Gravity;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.RelativeLayout;import android.widget.TextView;import java.util.ArrayList;import java.util.Collection;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;import info.nukoneko.android.ho_n.R;import info.nukoneko.android.ho_n.controller.common.view.NKRoundImageView;import info.nukoneko.android.ho_n.controller.common.view.NKSquareImageView;import info.nukoneko.android.ho_n.sys.NKAppController;import info.nukoneko.android.ho_n.sys.util.image.NKPicasso;import info.nukoneko.android.ho_n.sys.util.rx.Optional;import info.nukoneko.android.ho_n.sys.util.text.NKTextLinkCallback;import info.nukoneko.android.ho_n.sys.util.text.NKTextUtil;import rx.Observable;import twitter4j.ExtendedMediaEntity;import twitter4j.Status;import twitter4j.User;/** * Created by TEJNEK on 2016/10/21. */public final class NKTweetAdapter extends RecyclerView.Adapter<NKTweetAdapter.TweetViewHolder> {    @NonNull    private final ArrayList<Status> data = new ArrayList<>();    private final Object lock = new Object();    private final Context context;    private final Drawable iconFavoriteOn;    private final Drawable iconFavoriteOff;    private final Drawable iconReTweetOn;    private final Drawable iconReTweetOff;    @ColorInt    private final int colorNormal;    @ColorInt    private final int colorReTweeted;    @ColorInt    private final int colorReTweetedByMe;    private final int dimenTweetImageSize;    private final Typeface textViewFont;    @Nullable NKTweetAdapterListener listener;    public NKTweetAdapter(Context context) {        this(context, null);    }    public NKTweetAdapter(Context context, @Nullable NKTweetAdapterListener listener) {        this.context = context;        this.listener = listener;        textViewFont = Typeface.createFromAsset(context.getAssets(), "yutapon.ttc");        iconFavoriteOn = context.getDrawable(R.drawable.ic_favorite_on);        iconFavoriteOff = context.getDrawable(R.drawable.ic_favorite_off);        iconReTweetOn = context.getDrawable(R.drawable.ic_retweet_on);        iconReTweetOff = context.getDrawable(R.drawable.ic_re_tweet_off);        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {            colorNormal = context.getColor(R.color.colorTweet);            colorReTweeted = context.getColor(R.color.colorTweetReTweet);            colorReTweetedByMe = context.getColor(R.color.colorTweetReTweetByMe);        } else {            colorNormal = context.getResources().getColor(R.color.colorTweet);            colorReTweeted = context.getResources().getColor(R.color.colorTweetReTweet);            colorReTweetedByMe = context.getResources().getColor(R.color.colorTweetReTweetByMe);        }        dimenTweetImageSize = NKAppController.getApp().getWindowSize().x;    }    @Override    public NKTweetAdapter.TweetViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        final LayoutInflater inflater = LayoutInflater.from(parent.getContext());        final View view = inflater.inflate(R.layout.item_list_tweet, parent, false);        NKTweetAdapter.TweetViewHolder holder = new NKTweetAdapter.TweetViewHolder(view);        setFontStyle(holder.tweetUserName);        setFontStyle(holder.tweetUserScreen);        setFontStyle(holder.tweetStatusText);        return holder;    }    @Override    public void onBindViewHolder(NKTweetAdapter.TweetViewHolder holder, int position) {        Optional.ofNullable(data.get(position)).subscribe(status -> {            holder.setStatus(status);            //*** Set User info ***/            User user;            if (status.isRetweet()) {                user = status.getRetweetedStatus().getUser();            } else {                user = status.getUser();            }            // Icon            NKPicasso.getInstance()                    .load(user.getProfileImageURLHttps())                    .fit().centerCrop().into(holder.tweetUserIcon);            holder.tweetUserName.setText(user.getName());            holder.tweetUserScreen.setText(String.format("@%s", user.getScreenName()));            {                Status _status;                if (status.isRetweet()) {                    _status = status.getRetweetedStatus();                } else {                    _status = status;                }                //*** Set Tweet ***/                holder.tweetStatusText.setText(NKTextUtil.setLinkTag(_status.getText(), new TweetLinkCallback(context)));                holder.tweetStatusText.setMovementMethod(LinkMovementMethod.getInstance());                // date, via                holder.tweetStatusDate.setText(NKTextUtil.getDate(_status.getCreatedAt()));                holder.tweetStatusVia.setText(String.format("via %s", NKTextUtil.getVia(_status.getSource())));            }            //*** Set Tweet status **/            // Favorite            if (status.isFavorited()) {                holder.tweetStatusFavorite.setBackground(iconFavoriteOn);            } else {                holder.tweetStatusFavorite.setBackground(iconFavoriteOff);            }            // ReTweet            if (status.isRetweet()) {                if (status.isRetweetedByMe()) {                    holder.tweetView.setBackgroundColor(colorReTweetedByMe);                } else {                    holder.tweetView.setBackgroundColor(colorReTweeted);                }            } else {                holder.tweetView.setBackgroundColor(colorNormal);            }            if (status.isRetweeted()) {                holder.tweetStatusReTweet.setBackground(iconReTweetOn);            } else {                holder.tweetStatusReTweet.setBackground(iconReTweetOff);            }            // Images            ExtendedMediaEntity[] medias = status.getExtendedMediaEntities();            if (medias.length > 0) {                holder.tweetStatusImages.setVisibility(View.VISIBLE);                holder.tweetStatusImages.removeAllViews();                LinearLayout.LayoutParams layoutParams =                        new LinearLayout.LayoutParams(                                ViewGroup.LayoutParams.WRAP_CONTENT,                                ViewGroup.LayoutParams.WRAP_CONTENT);                if (medias.length == 1) {                    layoutParams.width = dimenTweetImageSize;                    layoutParams.height = dimenTweetImageSize;                    layoutParams.gravity = Gravity.CENTER_HORIZONTAL;                    NKSquareImageView view = new NKSquareImageView(context);                    view.setScaleType(ImageView.ScaleType.CENTER_CROP);                    view.setLayoutParams(layoutParams);                    holder.tweetStatusImages.addView(view);                    NKPicasso.getInstance().load(medias[0].getMediaURLHttps()).into(view);                } else {                    final int imageSize = dimenTweetImageSize / 2;                    layoutParams.width = imageSize;                    layoutParams.height = imageSize;                    layoutParams.gravity = Gravity.LEFT;                    Observable.from(medias).forEach(media -> {                        NKSquareImageView view = new NKSquareImageView(context);                        view.setScaleType(ImageView.ScaleType.CENTER_CROP);                        view.setLayoutParams(layoutParams);                        holder.tweetStatusImages.addView(view);                        NKPicasso.getInstance().load(media.getMediaURLHttps()).into(view);                    });                }            } else {                holder.tweetStatusImages.setVisibility(View.GONE);                holder.tweetStatusImages.removeAllViews();            }            // Retweet?            holder.initReTweetView();            if (status.isRetweet()) {                holder.tweetReTweetLayout.setVisibility(View.VISIBLE);                NKPicasso.getInstance().load(status.getUser().getProfileImageURLHttps())                        .into(holder.tweetReTweetUserIcon);                holder.tweetReTweetUserName.setText(status.getUser().getName());                holder.tweetReTweetUserScreen.setText(status.getUser().getScreenName());            } else {                holder.tweetReTweetLayout.setVisibility(View.GONE);            }        });    }    @Override    public int getItemCount() {        return data.size();    }    public void clear() {        synchronized (lock) {            int itemCount = data.size();            data.clear();            notifyItemRangeRemoved(0, itemCount);        }    }    void add(Status status) {        synchronized (lock) {            if(Observable.from(data)                    .filter(_status -> status.getId() == _status.getId())                    .toList().toBlocking().single().size() > 0) return;            data.add(0, status);            notifyItemInserted(0);            Optional.ofNullable(listener).subscribe(nkTweetAdapterListener -> {                nkTweetAdapterListener.onInserted(0, status);            });        }    }    public int indexOf(Status status) {        return indexOf(status.getId());    }    public int indexOf(long statusId) {        synchronized (lock) {            int index = -1;            for (int i = 0; i < data.size(); i++) {                if (data.get(i).getId() == statusId) {                    index = i;                    break;                }            }            return index;        }    }    public void update(Status status) {        synchronized (lock) {            final int index = indexOf(status);            if (index == -1) {                return;            }            data.set(index, status);            notifyItemChanged(index);            Optional.ofNullable(listener).subscribe(nkTweetAdapterListener -> {                nkTweetAdapterListener.onUpdated(index, status);            });        }    }    public void delete(long statusId) {        synchronized (lock) {            final int index = indexOf(statusId);            if (index == -1) return;            Optional.ofNullable(data.get(index)).subscribe(status -> {                if (status.getId() != statusId) return;                Optional.ofNullable(listener).subscribe(listener1 -> {                    listener1.onDeleted(index, status);                });                data.remove(index);                notifyItemRemoved(index);            });        }    }    void addAll(@NonNull List<? extends Status> collection) {        synchronized (lock) {            long minStatusId = Long.MAX_VALUE;            long maxStatusId = Long.MIN_VALUE;            if (data.size() > 0) {                minStatusId = data.get(data.size() - 1).getId();                maxStatusId = data.get(0).getId();            }            long finalMaxStatusId = maxStatusId;            long finalMinStatusId = minStatusId;            Collection<? extends Status> filteredList =                    Observable.from(collection)                            .filter(s -> s.getId() > finalMaxStatusId || finalMinStatusId > s.getId()).toList()                            .toBlocking().single();            int itemCount = filteredList.size();            int startPosition = data.size();            data.addAll(filteredList);            notifyItemRangeInserted(startPosition, itemCount);        }    }    private void setFontStyle(TextView textView) {        textView.setTypeface(textViewFont, Typeface.NORMAL);    }    //*** TextLinkCallback    private class TweetLinkCallback extends NKTextLinkCallback {        TweetLinkCallback(Context context) {            super(context);        }        @Override        public void onClickUri(@NonNull String uri) {            getContext().startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(uri)));        }        @Override        public void onClickTag(@NonNull String tag) {        }    }    //*** TweetViewHolder    static class TweetViewHolder extends RecyclerView.ViewHolder {        final View view;        @BindView(R.id.tweet_view)        CardView tweetView;        @BindView(R.id.tweet_user_icon)        NKRoundImageView tweetUserIcon;        @BindView(R.id.tweet_user_name)        TextView tweetUserName;        @BindView(R.id.tweet_user_screen)        TextView tweetUserScreen;        @BindView(R.id.tweet_status_favorite)        Button tweetStatusFavorite;        @BindView(R.id.tweet_status_re_tweet)        Button tweetStatusReTweet;        @BindView(R.id.tweet_status_text)        TextView tweetStatusText;        @BindView(R.id.tweet_status_date)        TextView tweetStatusDate;        @BindView(R.id.tweet_status_via)        TextView tweetStatusVia;        // images        @BindView(R.id.tweet_status_images)        LinearLayout tweetStatusImages;        // retweeted status        @BindView(R.id.tweet_reTweet_layout)        RelativeLayout tweetReTweetLayout;        @BindView(R.id.tweet_reTweet_user_icon)        NKRoundImageView tweetReTweetUserIcon;        @BindView(R.id.tweet_reTweet_user_name)        TextView tweetReTweetUserName;        @BindView(R.id.tweet_reTweet_user_screen)        TextView tweetReTweetUserScreen;        @OnClick(R.id.tweet_user_icon)        void onClickUserIcon(View view) {            Optional.ofNullable(listener).subscribe(listener1 -> {                listener1.onClickUserIcon(status);            });        }        @OnClick(R.id.tweet_status_favorite)        void onClickStatusFavorite(View view) {            Optional.ofNullable(listener).subscribe(listener1 -> {                listener1.onClickTweetFavorite(status);            });        }        @OnClick(R.id.tweet_status_re_tweet)        void onClickStatusReTweet(View view) {            Optional.ofNullable(listener).subscribe(listener1 -> {                listener1.onClickTweetReTweet(status);            });        }        @Nullable OnClickTweetListener listener;        Status status;        TweetViewHolder(View itemView) {            super(itemView);            this.view = itemView;            if (itemView.getContext() instanceof OnClickTweetListener) {                this.listener = (OnClickTweetListener) itemView.getContext();            }            ButterKnife.bind(this, itemView);        }        void setStatus(Status status) {            this.status = status;        }        void initReTweetView(){            tweetReTweetUserIcon.setImageDrawable(null);            tweetReTweetUserName.setText("");            tweetReTweetUserScreen.setText("");        }    }    interface NKTweetAdapterListener {        void onInserted(int position, Status status);        void onUpdated(int position, Status status);        void onDeleted(int position, Status status);    }}